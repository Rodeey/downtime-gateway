{
  "openapi": "3.1.0",
  "info": {
    "version": "1.0.0",
    "title": "Downtime Gateway API"
  },
  "paths": {
    "/test-db": {
      "x-zuplo-path": {
        "pathMode": "open-api"
      },
      "get": {
        "summary": "Supabase connectivity check",
        "description": "Writes a heartbeat row to request_logs to verify Supabase credentials.",
        "x-zuplo-route": {
          "corsPolicy": "anything-goes",
          "handler": {
            "export": "default",
            "module": "$import(./modules/test-db)",
            "options": {}
          },
          "policies": {
            "inbound": []
          }
        },
        "operationId": "test-db"
      }
    },
    "/test-env": {
      "x-zuplo-path": {
        "pathMode": "open-api"
      },
      "get": {
        "summary": "Inspect configured environment variables",
        "x-zuplo-route": {
          "corsPolicy": "anything-goes",
          "handler": {
            "export": "default",
            "module": "$import(./modules/handlers/test-env)",
            "options": {}
          }
        },
        "responses": {
          "200": {
            "description": "Environment snapshot",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": ["string", "null"]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/places": {
      "x-zuplo-path": {
        "pathMode": "open-api"
      },
      "get": {
        "summary": "Discover downtime-friendly places",
        "description": "Fetches normalized places grouped by category with caching, open-now filtering, and travel-time ranking.",
        "operationId": "getPlaces",
        "x-zuplo-route": {
          "corsPolicy": "anything-goes",
          "handler": {
            "export": "default",
            "module": "$import(./modules/handlers/places-handler)",
            "options": {}
          }
        },
        "parameters": [
          {
            "name": "lat",
            "in": "query",
            "required": true,
            "schema": { "type": "number" },
            "description": "Latitude of the search origin"
          },
          {
            "name": "lng",
            "in": "query",
            "required": true,
            "schema": { "type": "number" },
            "description": "Longitude of the search origin"
          },
          {
            "name": "radius_m",
            "in": "query",
            "required": false,
            "schema": { "type": "integer", "minimum": 100 },
            "description": "Search radius in meters (defaults to 8000)"
          },
          {
            "name": "categories",
            "in": "query",
            "required": false,
            "schema": { "type": "string" },
            "description": "Comma separated category tokens (food_drink, coffee_wfh, outdoors, etc.)"
          },
          {
            "name": "open_now",
            "in": "query",
            "required": false,
            "schema": { "type": "boolean" },
            "description": "Override open-now filtering (defaults to true)"
          },
          {
            "name": "force_refresh",
            "in": "query",
            "required": false,
            "schema": { "type": "boolean" },
            "description": "Bypass cached results when true"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful search",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "source": { "type": "string", "enum": ["cache", "live"] },
                    "places": { "type": "array", "items": { "type": "object" } },
                    "categories_available": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "key": { "type": "string" },
                          "label": { "type": "string" },
                          "count": { "type": "integer" }
                        },
                        "required": ["key", "label", "count"]
                      }
                    },
                    "duration_ms": { "type": "number" },
                    "error_code": { "type": ["string", "null"] },
                    "error_message": { "type": ["string", "null"] }
                  },
                  "required": ["source", "places", "categories_available", "duration_ms"]
                }
              }
            }
          },
          "400": {
            "description": "Invalid query"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/categories": {
      "x-zuplo-path": {
        "pathMode": "open-api"
      },
      "get": {
        "summary": "List configured category buckets",
        "x-zuplo-route": {
          "corsPolicy": "anything-goes",
          "handler": {
            "export": "default",
            "module": "$import(./modules/handlers/categories-handler)",
            "options": {}
          }
        },
        "responses": {
          "200": {
            "description": "Category metadata",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "categories": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "key": { "type": "string" },
                          "label": { "type": "string" },
                          "cap": { "type": "integer" },
                          "minimum": { "type": "integer" }
                        },
                        "required": ["key", "label", "cap", "minimum"]
                      }
                    }
                  },
                  "required": ["categories"]
                }
              }
            }
          }
        }
      }
    },
    "/geocode": {
      "x-zuplo-path": {
        "pathMode": "open-api"
      },
      "get": {
        "summary": "Geocode an address",
        "description": "Uses Geoapify to convert an address or place name into coordinates.",
        "operationId": "geocode",
        "x-zuplo-route": {
          "corsPolicy": "anything-goes",
          "handler": {
            "export": "default",
            "module": "$import(./modules/handlers/geocode-handler)",
            "options": {}
          }
        },
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "required": true,
            "schema": { "type": "string" },
            "description": "Address or keyword to geocode"
          }
        ],
        "responses": {
          "200": {
            "description": "Geocode result"
          },
          "400": {
            "description": "Missing or invalid query"
          },
          "502": {
            "description": "Upstream provider error"
          }
        }
      }
    },
    "/travel-times": {
      "x-zuplo-path": {
        "pathMode": "open-api"
      },
      "post": {
        "summary": "Estimate travel times",
        "description": "Returns cached or heuristic travel estimates between an origin and destinations.",
        "operationId": "travelTimes",
        "x-zuplo-route": {
          "corsPolicy": "anything-goes",
          "handler": {
            "export": "default",
            "module": "$import(./modules/handlers/travel-times-handler)",
            "options": {}
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "origin": {
                    "type": "object",
                    "properties": {
                      "lat": { "type": "number" },
                      "lng": { "type": "number" }
                    },
                    "required": ["lat", "lng"]
                  },
                  "destinations": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "place_id": { "type": "string" },
                        "lat": { "type": "number" },
                        "lng": { "type": "number" }
                      },
                      "required": ["place_id", "lat", "lng"]
                    }
                  }
                },
                "required": ["origin", "destinations"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Travel estimates",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "origin": {
                      "type": "object",
                      "properties": {
                        "lat": { "type": "number" },
                        "lng": { "type": "number" }
                      },
                      "required": ["lat", "lng"]
                    },
                    "results": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "place_id": { "type": "string" },
                          "walk_min": { "type": ["number", "null"] },
                          "drive_min": { "type": ["number", "null"] },
                          "source": { "type": "string", "enum": ["cache", "live"] }
                        },
                        "required": ["place_id", "source"]
                      }
                    },
                    "source": { "type": "string", "enum": ["cache", "live"] }
                  },
                  "required": ["origin", "results", "source"]
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "405": {
            "description": "Method not allowed"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    }
  }
}
